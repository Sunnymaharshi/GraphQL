Notes: 
    REST (REpresentational State Transfer)
        is basically an architectural style of development having some principles   
    REST-ful API
        standardized implementation of the REST architecture
        architectural style for an application programming interface that uses 
        HTTP requests to access and use data. 
        HTTP method
            GET
            POST
            PUT
            DELETE etc
        Endpoint
            URL to access or update data
            ex: http://myapi.com/posts/186
        Header
            contains the details needed to execute the call and handle the response.
            ex:authentication data, an encryption key etc 
        Body
            may contain the new data to be added to the server through a POST or PUT method.
    
    Cons of REST-ful APIs 
        1.creating Endpoint for fetching complex data would be difficult
        ex: /users/432/friends_with_companies_positions 
        list of companies assosiated with a user friends 
        2.too many http requests to get the data we need
        3.might fetch the more data than we needed
    
    GraphQL
        A query language for your API and a server-side runtime
        for executing queries using a type system you define for your data
        we don't change anything in our existing databases(MySQL,MongoDB etc)        
        It visualizes the data in a Graph Structure (nodes,edges)
    
    GraphQL Schema
        to describe our application data and it's relations 
        ex: {
            name:'User',
            fields:{
                id: {type: GraphQLString},
                firstName: {type: GraphQLString},
                age: {type:GraphQLInt}
            }
        }

    Root Query 
        start point in GraphQL server 
        when we request a query to GQL server, it goes first to root query 
    
    GraphQL Query  
        we write query to fetch the data we needed
        for list of companies assosiated with a user friends
            query {
                user(id: "432"){
                    friends{
                        company{
                            name
                        }
                    }
                }
            }
    Query fragment
        we can define set of properties into a fragment
        adding Type after on, checks if those properties are in that type
        ex: fragment companyDetails on Company {
            id
            name
            description
        }
        usage in query:
            {
                company(id:"1"){
                    ...companyDetails
                }
            }
    
    mutation query 
        used to mutate data in database 
        must have 'mutation' keyword before query
        ex: mutation {
            addUser(firstName:"Nick",age:21){
                id
                firstName
                age
            }
        }




